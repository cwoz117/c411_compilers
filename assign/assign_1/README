================================================================================
 Author: Chris Wozniak
 Course: CPSC411

 The flex program takes as input a defined set of instructions following a 
 strict format. Once complete we must run flex to generate source code
 for a parser which will read in any file, and parse it according to 
 the rules generated by the regular expressions.

================================================================================
1. Generate a Flex input file
	Use the notes provided in the textbook section of this repo to 
	organize your input file accordingly.

2. Run flex on the input file to produce a lex.yy.c output file, using
   commands similar to below.
	
	flex input_file.lex

3. Compile your generated program with gcc. NOTE: you must either install
   the "flex-static" package, and compile with the -lfl flag to make
   use of the yywrap() function for handling multiple input files.
	OR
   add the "%option noyywrap" to the top of your input file in step 1.

	gcc lex.yy.c -lfl	// Note to remove -lfl if you dont have it.

4. Now Run your new parser, redirecting input from the keyboard to a 
   source code file. (Note to add a "-o new_name" to give the parser
   a better name if you dislike a.out)
	
	./a.out < input_source.c

   This will list the tokens generated by your parser, and you can move on
   to the next section.

NOTE: --------------------------------------------------------------------------

	This has all been setup in the makefile, giving the program
	the name "parser" simply run
		
		make

	then test any file with

		./parser < test_code.c

================================================================================

